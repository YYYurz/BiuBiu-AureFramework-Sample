// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEPLAY_GAMECONFIG_H_
#define FLATBUFFERS_GENERATED_GAMEPLAY_GAMECONFIG_H_

#include "flatbuffers/flatbuffers.h"

#include "FP_generated.h"

namespace GameConfig {

struct GamePlay;

struct GamePlayList;

struct GamePlay FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SCENEID = 6,
    VT_MAPCONFIG = 8,
    VT_PRELOADENTITIES = 10,
    VT_PLAYERASSET = 12
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t SceneId() const {
    return GetField<uint32_t>(VT_SCENEID, 0);
  }
  const flatbuffers::String *MapConfig() const {
    return GetPointer<const flatbuffers::String *>(VT_MAPCONFIG);
  }
  const flatbuffers::Vector<uint32_t> *PreloadEntities() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_PRELOADENTITIES);
  }
  const flatbuffers::String *PlayerAsset() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYERASSET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_SCENEID) &&
           VerifyOffset(verifier, VT_MAPCONFIG) &&
           verifier.VerifyString(MapConfig()) &&
           VerifyOffset(verifier, VT_PRELOADENTITIES) &&
           verifier.VerifyVector(PreloadEntities()) &&
           VerifyOffset(verifier, VT_PLAYERASSET) &&
           verifier.VerifyString(PlayerAsset()) &&
           verifier.EndTable();
  }
};

struct GamePlayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(GamePlay::VT_ID, Id, 0);
  }
  void add_SceneId(uint32_t SceneId) {
    fbb_.AddElement<uint32_t>(GamePlay::VT_SCENEID, SceneId, 0);
  }
  void add_MapConfig(flatbuffers::Offset<flatbuffers::String> MapConfig) {
    fbb_.AddOffset(GamePlay::VT_MAPCONFIG, MapConfig);
  }
  void add_PreloadEntities(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> PreloadEntities) {
    fbb_.AddOffset(GamePlay::VT_PRELOADENTITIES, PreloadEntities);
  }
  void add_PlayerAsset(flatbuffers::Offset<flatbuffers::String> PlayerAsset) {
    fbb_.AddOffset(GamePlay::VT_PLAYERASSET, PlayerAsset);
  }
  explicit GamePlayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GamePlayBuilder &operator=(const GamePlayBuilder &);
  flatbuffers::Offset<GamePlay> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GamePlay>(end);
    return o;
  }
};

inline flatbuffers::Offset<GamePlay> CreateGamePlay(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t SceneId = 0,
    flatbuffers::Offset<flatbuffers::String> MapConfig = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> PreloadEntities = 0,
    flatbuffers::Offset<flatbuffers::String> PlayerAsset = 0) {
  GamePlayBuilder builder_(_fbb);
  builder_.add_PlayerAsset(PlayerAsset);
  builder_.add_PreloadEntities(PreloadEntities);
  builder_.add_MapConfig(MapConfig);
  builder_.add_SceneId(SceneId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline flatbuffers::Offset<GamePlay> CreateGamePlayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t SceneId = 0,
    const char *MapConfig = nullptr,
    const std::vector<uint32_t> *PreloadEntities = nullptr,
    const char *PlayerAsset = nullptr) {
  auto MapConfig__ = MapConfig ? _fbb.CreateString(MapConfig) : 0;
  auto PreloadEntities__ = PreloadEntities ? _fbb.CreateVector<uint32_t>(*PreloadEntities) : 0;
  auto PlayerAsset__ = PlayerAsset ? _fbb.CreateString(PlayerAsset) : 0;
  return GameConfig::CreateGamePlay(
      _fbb,
      Id,
      SceneId,
      MapConfig__,
      PreloadEntities__,
      PlayerAsset__);
}

struct GamePlayList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<GamePlay>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GamePlay>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct GamePlayListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GamePlay>>> data) {
    fbb_.AddOffset(GamePlayList::VT_DATA, data);
  }
  explicit GamePlayListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GamePlayListBuilder &operator=(const GamePlayListBuilder &);
  flatbuffers::Offset<GamePlayList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GamePlayList>(end);
    return o;
  }
};

inline flatbuffers::Offset<GamePlayList> CreateGamePlayList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GamePlay>>> data = 0) {
  GamePlayListBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<GamePlayList> CreateGamePlayListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<GamePlay>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<GamePlay>>(*data) : 0;
  return GameConfig::CreateGamePlayList(
      _fbb,
      data__);
}

}  // namespace GameConfig

#endif  // FLATBUFFERS_GENERATED_GAMEPLAY_GAMECONFIG_H_
