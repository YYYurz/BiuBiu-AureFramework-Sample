// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UIWINDOW_GAMECONFIG_H_
#define FLATBUFFERS_GENERATED_UIWINDOW_GAMECONFIG_H_

#include "flatbuffers/flatbuffers.h"

#include "FP_generated.h"

namespace GameConfig {

struct UIWindow;

struct UIWindowList;

struct UIWindow FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_UINAME = 6,
    VT_UIGROUPNAME = 8,
    VT_ASSETNAME = 10,
    VT_LUAFILE = 12
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *UIName() const {
    return GetPointer<const flatbuffers::String *>(VT_UINAME);
  }
  const flatbuffers::String *UIGroupName() const {
    return GetPointer<const flatbuffers::String *>(VT_UIGROUPNAME);
  }
  const flatbuffers::String *AssetName() const {
    return GetPointer<const flatbuffers::String *>(VT_ASSETNAME);
  }
  const flatbuffers::String *LuaFile() const {
    return GetPointer<const flatbuffers::String *>(VT_LUAFILE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_UINAME) &&
           verifier.VerifyString(UIName()) &&
           VerifyOffset(verifier, VT_UIGROUPNAME) &&
           verifier.VerifyString(UIGroupName()) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyString(AssetName()) &&
           VerifyOffset(verifier, VT_LUAFILE) &&
           verifier.VerifyString(LuaFile()) &&
           verifier.EndTable();
  }
};

struct UIWindowBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(UIWindow::VT_ID, Id, 0);
  }
  void add_UIName(flatbuffers::Offset<flatbuffers::String> UIName) {
    fbb_.AddOffset(UIWindow::VT_UINAME, UIName);
  }
  void add_UIGroupName(flatbuffers::Offset<flatbuffers::String> UIGroupName) {
    fbb_.AddOffset(UIWindow::VT_UIGROUPNAME, UIGroupName);
  }
  void add_AssetName(flatbuffers::Offset<flatbuffers::String> AssetName) {
    fbb_.AddOffset(UIWindow::VT_ASSETNAME, AssetName);
  }
  void add_LuaFile(flatbuffers::Offset<flatbuffers::String> LuaFile) {
    fbb_.AddOffset(UIWindow::VT_LUAFILE, LuaFile);
  }
  explicit UIWindowBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UIWindowBuilder &operator=(const UIWindowBuilder &);
  flatbuffers::Offset<UIWindow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UIWindow>(end);
    return o;
  }
};

inline flatbuffers::Offset<UIWindow> CreateUIWindow(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    flatbuffers::Offset<flatbuffers::String> UIName = 0,
    flatbuffers::Offset<flatbuffers::String> UIGroupName = 0,
    flatbuffers::Offset<flatbuffers::String> AssetName = 0,
    flatbuffers::Offset<flatbuffers::String> LuaFile = 0) {
  UIWindowBuilder builder_(_fbb);
  builder_.add_LuaFile(LuaFile);
  builder_.add_AssetName(AssetName);
  builder_.add_UIGroupName(UIGroupName);
  builder_.add_UIName(UIName);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline flatbuffers::Offset<UIWindow> CreateUIWindowDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *UIName = nullptr,
    const char *UIGroupName = nullptr,
    const char *AssetName = nullptr,
    const char *LuaFile = nullptr) {
  auto UIName__ = UIName ? _fbb.CreateString(UIName) : 0;
  auto UIGroupName__ = UIGroupName ? _fbb.CreateString(UIGroupName) : 0;
  auto AssetName__ = AssetName ? _fbb.CreateString(AssetName) : 0;
  auto LuaFile__ = LuaFile ? _fbb.CreateString(LuaFile) : 0;
  return GameConfig::CreateUIWindow(
      _fbb,
      Id,
      UIName__,
      UIGroupName__,
      AssetName__,
      LuaFile__);
}

struct UIWindowList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<UIWindow>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<UIWindow>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct UIWindowListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<UIWindow>>> data) {
    fbb_.AddOffset(UIWindowList::VT_DATA, data);
  }
  explicit UIWindowListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UIWindowListBuilder &operator=(const UIWindowListBuilder &);
  flatbuffers::Offset<UIWindowList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UIWindowList>(end);
    return o;
  }
};

inline flatbuffers::Offset<UIWindowList> CreateUIWindowList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<UIWindow>>> data = 0) {
  UIWindowListBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<UIWindowList> CreateUIWindowListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<UIWindow>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<UIWindow>>(*data) : 0;
  return GameConfig::CreateUIWindowList(
      _fbb,
      data__);
}

}  // namespace GameConfig

#endif  // FLATBUFFERS_GENERATED_UIWINDOW_GAMECONFIG_H_
