-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: GameConfig

local flatbuffers = require('3rd.flatbuffers')

local GameConfigList = {} -- the module
local GameConfigList_mt = {} -- the class metatable

function GameConfigList.New()
    local o = {}
    setmetatable(o, {__index = GameConfigList_mt})
    return o
end
function GameConfigList.GetRootAsGameConfigList(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = GameConfigList.New()
    o:Init(buf, n + offset)
    return o
end
function GameConfigList_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function GameConfigList_mt:Data(j)
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('GameConfig.GameConfig').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function GameConfigList_mt:DataLength()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function GameConfigList.Start(builder) builder:StartObject(1) end
function GameConfigList.AddData(builder, data) builder:PrependUOffsetTRelativeSlot(0, data, 0) end
function GameConfigList.StartDataVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function GameConfigList.End(builder) return builder:EndObject() end

return GameConfigList -- return the module